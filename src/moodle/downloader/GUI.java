/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package moodle.downloader;

import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.FontMetrics;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.ProtocolException;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Action;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.plaf.LabelUI;
import javax.swing.plaf.metal.MetalLabelUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;


/**
 *
 * @author prada
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        JPopupMenu popup = new JPopupMenu();
        cookieBox.add(popup);
        cookieBox.setComponentPopupMenu(popup);
        tocopyText.add(popup);
        tocopyText.setComponentPopupMenu(popup);
        term.add(popup);
        term.setComponentPopupMenu(popup);

        Action cut = new DefaultEditorKit.CutAction();
        cut.putValue(Action.NAME, "Cut");
        cut.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control X"));
        popup.add( cut );

        Action copy = new DefaultEditorKit.CopyAction();
        copy.putValue(Action.NAME, "Copy");
        copy.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control C"));
        popup.add( copy );

        Action paste = new DefaultEditorKit.PasteAction();
        paste.putValue(Action.NAME, "Paste");
        paste.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control V"));
        popup.add( paste );

        new SmartScroller(this.jScrollPane3, SmartScroller.VERTICAL, SmartScroller.END);
        
        dirLabel.setText(System.getProperty("user.dir")+File.separator+folder);
        
    }
String baseurl="https://cv.usc.es";
String cookie = "MoodleSession=pemhbkdjseflph6p43qm1v5ce7";
String folder = "descargas5";
float paso =0;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tocopyText = new javax.swing.JTextPane();
        cookieBox = new javax.swing.JTextField();
        loadButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        lista = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        barra = new javax.swing.JProgressBar();
        jScrollPane3 = new javax.swing.JScrollPane();
        term = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        jScrollPane4 = new javax.swing.JScrollPane();
        dirLabel = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Moodle Downloader");
        setMinimumSize(new java.awt.Dimension(620, 640));

        jLabel1.setText("Paste this in your browser console:");

        tocopyText.setEditable(false);
        tocopyText.setText("(function() {\n    var a=RegExp(\"\"+\"MoodleSession\"+\"[^;]+\").exec(document.cookie); \n    var u=\"MoodleSession=\"+unescape(!!a ? a.toString().replace(/^[^=]+./,\"\") : \"\"); \n    copy(u);\n    console.log(u);\n})();");
        jScrollPane1.setViewportView(tocopyText);

        cookieBox.setText("Paste here the cookie");
        cookieBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cookieBoxFocusGained(evt);
            }
        });

        loadButton.setText("Download!");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        copyButton.setText("Copy");
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(lista);

        jLabel2.setText("<html>Instructions:<br>\n1.Log in to your moodle account.<br>\n2.Right-click in any point of the page.<br>\n3.Click \"Inspect element\".<br>\n4.Choose \"Console\" tab.<br>\n5.Paste the code given here.<br>\n6.Paste back the result here and hit the \"Load\" button.<br>\n");

        jLabel4.setText("Courses:");

        term.setEditable(false);
        term.setColumns(20);
        term.setRows(5);
        jScrollPane3.setViewportView(term);

        jButton1.setText("Help! How to get the cookie??");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Base Moodle URL");

        jTextField1.setText("https://cv.usc.es");

        jLabel5.setText("Download base folder");

        jButton2.setText("Choose folder");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel6.setText("By Manuel de Prada");

        jLabel7.setText("github.com/manudroid19");

        dirLabel.setColumns(20);
        jScrollPane4.setViewportView(dirLabel);

        jLabel8.setText("Current folder:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(barra, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cookieBox, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(58, 58, 58)
                                                .addComponent(jButton1))
                                            .addGroup(layout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(copyButton)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(0, 73, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(loadButton)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                                        .addComponent(jButton2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextField1))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jScrollPane4))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filler1, javax.swing.GroupLayout.DEFAULT_SIZE, 62, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cookieBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(copyButton)
                                .addGap(91, 91, 91))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(jButton1)))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(loadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(60, 60, 60)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7))
                    .addComponent(barra, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cookieBoxFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cookieBoxFocusGained
    if(cookieBox.getText().contains("Paste here"))
        cookieBox.setText("");        // TODO add your handling code here:
    }//GEN-LAST:event_cookieBoxFocusGained

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        baseurl = this.jTextField1.getText();
        cookie = cookieBox.getText();
        Thread thread = new Thread(new MyRunnable());
        thread.start();
        if(term.getText().contains("ERROR"))
            term.append("\n");
        term.append("Connecting to moodle...");
        
       
        
    }//GEN-LAST:event_loadButtonActionPerformed
    public class MyRunnable implements Runnable {

    public void run(){
       loadCursos();
    }
  }
    private void loadCursos(){
        String content=null;
        
        URL myUrl;
        URLConnection urlConn;
        try {
            myUrl = new URL(baseurl +"/my/");
            urlConn = myUrl.openConnection();
            urlConn.setRequestProperty("Cookie", cookie);
            urlConn.connect();
            Scanner scanner = new Scanner(urlConn.getInputStream(), "UTF-8");
            scanner.useDelimiter("\\Z");
            term.append("\n"+"Fetching courses...");
            content = scanner.next();
            String[] cursosR =content.split(baseurl +"/course/view.php\\?id=");
            List<Integer> cursos= new ArrayList<>();
            List<String> conts= new ArrayList<>();
            for(int i=1;i<cursosR.length;i++){
                int s = Integer.parseInt(cursosR[i].substring(0, 4).replaceAll("[^0-9]", ""));
                if(!cursos.contains(s))
                    cursos.add(s);
            }
            DefaultListModel<String> model = new DefaultListModel<>();
            lista.setModel(model);
            barra.setValue((int)(paso=((float)1/(cursos.size()+1))*100));

            for (Integer curso : cursos) {
                conts.add(getCont(curso, "course"));
                model.addElement(getTitle(conts.get(cursos.indexOf(curso))));
            }
            term.append("\n"+"Starting download...");
            for(Integer curso : cursos){
                descargarCurso(conts.get(cursos.indexOf(curso)),curso);
                barra.setValue((int)(((float)(cursos.indexOf(curso)+2)/(cursos.size()+1))*100));
            }
        } catch (ProtocolException ex) {
            term.append("\n"+"ERROR: Incorrect cookie");
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch(FileNotFoundException ex){
            term.append("\n"+"ERROR: URL is incorrect");
        }catch (IOException ex) {
            log(ex);
        } 
        term.append("\n"+"Descarga finalizada!");
        barra.setValue(0);
    }
    private void descargarCurso(String cont,int id){
        String tit = getTitle(cont);
        String title = tit.split(" \\[")[0];
        
        File dir = new File(folder+File.separator+title);
        dir.mkdirs();
        new File(dir.getPath()+File.separator+"html").mkdirs();
        File html = new File(dir.getPath()+File.separator+"html"+File.separator+title+".html");
        
        try(  PrintWriter out = new PrintWriter( html )  ){
    out.println( cont );
}       catch (FileNotFoundException ex) {
            log(ex);
        }
        String[] split_res = cont.split("activity resource modtype\\_resource");
        List<Integer> resources = new ArrayList<>();
        for (int i=1;i<split_res.length;i++)
            resources.add(Integer.parseInt(split_res[i].substring(14,19).replaceAll("[^0-9]", "")));
        downloadRes(resources,id,title);
        barra.setValue((int) (barra.getValue()+0.2*paso));
        String[] split_folder = cont.split("activity folder modtype\\_folder");
        List<Integer> folders = new ArrayList<>();
        for (int i=1;i<split_folder.length;i++)
            folders.add(Integer.parseInt(split_folder[i].substring(14,19).replaceAll("[^0-9]", "")));
        downloadFolders(folders,tit, folder+File.separator+title);
        
        //int forum = Integer.parseInt(cont.split("activity forum modtype\\_forum")[1].substring(14,19).replaceAll("[^0-9]", ""));
        //String forumHtml = getCont(forum,"mod/forum");
        
    }
    
    private void downloadRes(List<Integer> resources, int id, String title){
        for(Integer res : resources){
            try {
                String link = baseurl +"/mod/resource/view.php?id="+res;
                URL linkUrl = new URL(link);
                HttpURLConnection con = (HttpURLConnection) linkUrl.openConnection();
                con.setRequestProperty("Cookie", cookie);
                
                //term.append("\n"+"link: "+link);
                InputStream is = con.getInputStream();
                
                Scanner scanner = null;
                if(con.getURL().toString().equals(baseurl +"/course/view.php?id="+id))
                    term.append("\n"+"No hay permisos.");//acceso no permitido
                else if(con.getURL().toString().equals(link)){
                    scanner = new Scanner(is, "UTF-8");
                    scanner.useDelimiter("\\Z");
                    String content = scanner.next();
                    
                    String[] split = content.split("mod_resource");
                    URL lnk = new URL(content.substring(split[0].lastIndexOf("https"), split[0].length() + split[1].indexOf("\"")+12));
                    downloadFile(lnk, folder+File.separator+title);

                }else{
                    File file = new File(con.getURL().toURI().getPath());
                    String name = file.getName();
                    term.append("\n"+"Downloading: "+folder+File.separator+title+File.separator+name);
                    ReadableByteChannel rbc = Channels.newChannel(is);
                    FileOutputStream fos = new FileOutputStream(folder+File.separator+title+File.separator+name);
                    fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);

                }
                    
            } catch (MalformedURLException ex) {
                log(ex);
            } catch (IOException | URISyntaxException ex) {
                log(ex);
            }
        }
    }
    private void downloadFolders(List<Integer> folders, String curso, String dir){
        for(Integer fol : folders){
            String cont = getCont(fol, "mod/folder");
            String title = getTitle(cont).replace(curso, "").replace(": ", "").trim();
            
            File dirf = new File(dir+File.separator+title);
            if( dirf.exists())
                for(int i=1;i<30;i++){
                    dirf = new File(dir+File.separator+title+"("+i+")");
                    if(!dirf.exists())
                        break;
                }
            dirf.mkdirs();
            String[] split_res = cont.split("fp-filename-icon\"><a href=\"");
            List<String> resources = new ArrayList<>();
            for (int i=1;i<split_res.length;i++){
                try {
                    downloadFile(new URL(split_res[i].substring(0,split_res[i].indexOf("\">"))),dirf.getPath());
                } catch (MalformedURLException ex) {
                    log(ex);
                }
                //term.append("\n"+split_res[i].substring(0,split_res[i].indexOf("\">")));
            }
            
        }
    }
    private void downloadFile(URL lnk, String dirr){
        try {
            File file = new File(lnk.toURI().getPath());
            String name = file.getName();
            term.append("\n"+"Downloading: "+dirr+File.separator+name);
            HttpURLConnection con2 = (HttpURLConnection) lnk.openConnection();
            con2.setRequestProperty("Cookie", cookie);
            ReadableByteChannel rbc = Channels.newChannel(con2.getInputStream());
            FileOutputStream fos = new FileOutputStream(dirr+File.separator+name);
            fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
        } catch (URISyntaxException ex) {
            log(ex);
        } catch (FileNotFoundException ex) {
            log(ex);
        } catch (IOException ex) {
            log(ex);
        }
    }
    private String getTitle(String content){
        String title = content.substring(content.indexOf("<title>") + 7, content.indexOf("</title>")); //Curso: 
        return title.substring(title.indexOf(": ")+2, title.length());
    }
    private String getCont(int id, String type){
        String content=null;
        URL myUrl;
        URLConnection urlConn;
        try {
            myUrl = new URL(baseurl +"/"+type+"/view.php?id="+id);
           
            urlConn = myUrl.openConnection();
            urlConn.setRequestProperty("Cookie", cookie);
            urlConn.connect();
            Scanner scanner = new Scanner(urlConn.getInputStream(), "UTF-8");
            scanner.useDelimiter("\\Z");
            content = scanner.next();
        } catch (MalformedURLException ex) {
            log(ex);
        } catch (IOException ex) {
            log(ex);
        }
        return content;
    }
    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
StringSelection stringSelection = new StringSelection(tocopyText.getText());
Clipboard clpbrd = Toolkit.getDefaultToolkit().getSystemClipboard();
clpbrd.setContents(stringSelection, null);    

    }//GEN-LAST:event_copyButtonActionPerformed
    private void log(Exception ex){
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            StringWriter sw = new StringWriter();
            ex.printStackTrace(new PrintWriter(sw));
            term.append("\n"+"ERROR: Unknown error. Debug info: "+sw.toString());            

    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         JFileChooser chooser = new JFileChooser(); 
    chooser.setCurrentDirectory(new java.io.File("."));
    chooser.setDialogTitle("Select the download directory");
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    //
    // disable the "All files" option.
    //
    chooser.setAcceptAllFileFilterUsed(false);
    //    
    if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
      dirLabel.setText(chooser.getSelectedFile().getPath());
      folder = chooser.getSelectedFile().getPath();
      }

     
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
    if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
        try {
            desktop.browse(new URL("https://youtu.be/XjOylmSQAwE").toURI());
        }   catch (MalformedURLException ex) { 
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (URISyntaxException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            } 
    }
                // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("GTK+".equals(info.getName())||"Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barra;
    private javax.swing.JTextField cookieBox;
    private javax.swing.JButton copyButton;
    private javax.swing.JTextArea dirLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JList<String> lista;
    private javax.swing.JButton loadButton;
    private javax.swing.JTextArea term;
    private javax.swing.JTextPane tocopyText;
    // End of variables declaration//GEN-END:variables
}
